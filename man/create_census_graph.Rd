% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create.R
\name{create_census_graph}
\alias{create_census_graph}
\title{Create a Dyad Census-Conditioned Random Graph}
\usage{
create_census_graph(
  n_vertices,
  mut = 0.25,
  asym = 0.5,
  null = 0.25,
  method = c("probability", "exact"),
  graph = c("igraph", "network", "matrix", "edgelist")
)
}
\arguments{
\item{n_vertices}{number of vertices in the graph.}

\item{mut}{if \code{method == "probability"}, the probability of obtaining a 
mutual dyad; otherwise, the number of mutual dyads.}

\item{asym}{if \code{method == "probability"}, the probability of obtaining an 
asymmetric dyad; otherwise, the number of asymmmetric dyads.}

\item{null}{if \code{method == "probability"}, the probability of obtaining a 
null dyad; otherwise, the number of null dyads.}

\item{method}{either \code{"probability"} or \code{"exact"}, see details}

\item{graph}{output class, either \code{"igraph"}, \code{"network"}, 
\code{"matrix"}, or \code{"edgelist"}}
}
\value{
a graph with the desired MAN property
}
\description{
Generate a network with pre-specified dyad census
}
\details{
Two approaches are offered, the \code{exact} method and the \code{probability} 
method.

When \code{method == "probability"}, the graph is generated based on 
independent draws from a multinomial distribution. This will rarely yield a 
graph with these exact probabilities, but large graphs will get quite close.
When values are passed to this function that do not add up to 1, they will be 
rescaled to do so (and a message is printed to the console).

When \code{method == "exact"}, the graph is generated with this exact MAN 
count, as long as they add up to the actualnumber of edges in the graph.

This function largely builds on the \code{\link[sna]{rguman}} function. 
The main difference is that we allow multiple classes of output and generate 
only a single conditioned graph. When a large number of MAN-conditioned 
graphs are to be generated, \code{\link[sna]{rguman}} is potentially more 
efficient.
}
\examples{
create_census_graph(10, mut = 45, asym = 0, null = 0, method = "exact")
# empty graph
create_census_graph(10, mut = 0, asym = 0, null = 45, method = "exact")
create_census_graph(10, mut = 0, asym = 0, null = 45, method = "probability")
create_census_graph(10, mut = 0, asym = 0, null = 1, method = "probability")

create_census_graph(10, mut = 0, asym = 45, null = 0, method = "exact") |> 
  snafun::count_dyads()

# will be rescaled
create_census_graph(10, mut = 0, asym = 45, null = 0, method = "probability") |> 
  snafun::count_dyads()

create_census_graph(10, mut = 0, asym = 1, null = 0, method = "probability") |> 
  snafun::count_dyads()

create_census_graph(10, mut = .25, asym = .30, null = .45, method = "probability") |> 
  snafun::count_dyads()

create_census_graph(10, method = "probability", graph = "igraph")
create_census_graph(10, method = "probability", graph = "network")
create_census_graph(10, method = "probability", graph = "edgelist")
create_census_graph(10, method = "probability", graph = "matrix")
}
