% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/has.R
\name{has}
\alias{has}
\alias{has_edge_attributes}
\alias{has_vertex_attributes}
\alias{has_vertex_attribute}
\alias{has_edge_attribute}
\alias{has_vertexnames}
\alias{has_loops}
\title{Check for the existence of edge attributes in the graph}
\usage{
has_edge_attributes(x)

has_vertex_attributes(x)

has_vertex_attribute(x, attrname)

has_edge_attribute(x, attrname)

has_vertexnames(x)

has_loops(x)
}
\arguments{
\item{x}{graph of class \code{igraph} or \code{network}}

\item{attrname}{name of the attribute to check for}
}
\value{
logical
}
\description{
Check for the existence of edge attributes in the graph
}
\details{
Simple utility function that returns \code{TRUE} if the graph has 
edge attributes and \code{FALSE} otherwise.
}
\section{Functions}{
\itemize{
\item \code{has_edge_attributes}: Check whether a graph has edge attributes

\item \code{has_vertex_attributes}: Check whether a graph has vertex attributes (where 
the attribute called "na" does not count, as that is only an internal attribute 
by the network package)

\item \code{has_vertex_attribute}: Check whether a graph has a specific vertex attribute (where 
the attribute called "na" does not count, as that is only an internal attribute 
by the network package)

\item \code{has_edge_attribute}: Check whether a graph has a specific edge attribute

\item \code{has_vertexnames}: Check whether a graph has vertex names. The function merely checks 
for the presence of the vertex attribute \code{name} (for a network of
class \code{igraph}) or \code{vertex.names} (for a network of
class \code{network}). 

Note that the \code{network} package tends to create vertex names by 
default, even if they were not added as separate attributes. 
In that case, the vertices are named as integers running  from 1 to the 
number of vertices. Of course, this function can not distinguish 
whether these are names the researcher want to use as names, or purely 
the result of the default behavior of the \code{network} package (and 
not meaningful names per se).

\item \code{has_loops}: Check whether a graph contains at least one loop (ie. 
an edge from a vertex to itself). Also works on a \code{matrix}.
}}

\examples{
data(florentine, package = "snafun")
has_vertexnames(florentine$flobusiness)      # TRUE

has_edge_attributes(florentine$flobusiness)  # FALSE
has_edge_attributes(florentine$flomarriage)  # TRUE

has_loops(florentine$flobusiness)
g <- igraph::graph( c(1,1,2,2,3,3,4,5))
has_loops(g)
m <- matrix(c(1, 0, 0, 0, 0, 1, 0, 1, 1), byrow = TRUE, ncol = 3)
has_loops(m)                                 # TRUE
diag(m) <- 0
has_loops(m)                                 # FALSE
}
