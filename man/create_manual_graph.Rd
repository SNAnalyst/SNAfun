% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create.R
\name{create_manual_graph}
\alias{create_manual_graph}
\title{Create a manual (literal) graph}
\usage{
create_manual_graph(..., simplify = TRUE, graph = c("igraph", "network"))
}
\arguments{
\item{...}{the formulae giving the structure of the graph, see details below.}

\item{simplify}{Logical scalar. By default the graph is simplified, 
loops and multiple edges are removed.}

\item{graph}{character, the type of graph to be generated: \code{igraph} (default) 
or \code{network}}
}
\value{
a graph of class \code{network} or \code{igraph}
}
\description{
Create a (small) graph quickly
}
\details{
This function is useful if you want to create a small (named) graph quickly, 
it works for both directed and undirected graphs.
You need to supply one or more R expressions giving the structure of the graph. 
The expressions consist of vertex names and edge operators. An edge operator 
is a sequence of ‘-’ and ‘+’ characters, the former is for the edges and 
the latter is used for arrow heads. The edges can be arbitrarily long, 
i.e. you may use as many ‘-’ characters to “draw” them as you like.

This function mainly acts as a wrapper for \code{\link[igraph]{graph_from_literal}} 
and almost all of the examples come from that function as well.
}
\examples{
# undirected graph
create_manual_graph(1-2)
##  the length of the edges does not matter, so the following this creates the same graph
create_manual_graph( 1-----2 )
create_manual_graph(1-2, 1-3, 2-3, 2-4, 3-5, 4-5, 4-6, 4-7, 5-6, 6-7, 8, 
  graph ="network")
# directed graph
create_manual_graph(Sam-+Mary, Sam-+Tom, Mary++Tom)

# bipartite graph
g_bipartite <- create_manual_graph(# listing organizations
      organization1:organization2:organization3,  
      # listing projects
      project1:project2,
      # specifying connections between organizations and projects 
      organization1:organization2 - project1, 
      organization2:organization3 - project2)
# note that the graph is bipartite mathematically, but the graph object 
# 'does not know' that yet.
snafun::extract_vertex_names(g_bipartite)
g_bipartite <- snafun::add_vertex_attributes(g_bipartite, "type", 
  value = grepl(pattern = "^project", x = snafun::extract_vertex_names(g_bipartite)))
snafun::is_bipartite(g_bipartite)


# If you have many disconnected components in the graph, separate them with commas. 
# You can also give isolate vertices.
create_manual_graph( A--B, C--D, E--F, G--H, I, J, K )

# The ‘:’ operator can be used to define vertex sets. 
# If an edge operator connects two vertex sets then every vertex from the first 
# set will be connected to every vertex in the second set. 
# The following form creates a full graph, including loop edges:
create_manual_graph( A:B:C:D -- A:B:C:D )

# In directed graphs, edges will be created only if the edge operator includes 
# a arrow head (‘+’) at the end of the edge:
create_manual_graph( A -+ B -+ C )
create_manual_graph( A +- B -+ C )
create_manual_graph( A +- B -- C )
# Thus in the third example no edge is created between vertices B and C.


# Mutual edges can be also created with a simple edge operator:
create_manual_graph( A +-+ B +---+ C ++ D + E)
# Note again that the length of the edge operators is arbitrary.

# If the vertex names include spaces or other special characters then you 
# need to quote them:
create_manual_graph( "this is" +- "a silly" -+ "graph here" )
# You can include any character in the vertex names this way, 
# even ‘+’ and ‘-’ characters.


# More examples
# A simple undirected graph
g <- create_manual_graph(
  Alice - Bob - Cecil - Alice,
  Daniel - Cecil - Eugene,
  Cecil - Gordon
)
g

# Another undirected graph, ":" notation
g2 <- create_manual_graph(Alice - Bob:Cecil:Daniel, Cecil:Daniel - Eugene:Gordon)
g2

# A directed graph
g3 <- create_manual_graph(
  Alice +-+ Bob --+ Cecil +-- Daniel,
  Eugene --+ Gordon:Helen
)
g3

# A graph with isolate vertices
g4 <- create_manual_graph(Alice -- Bob -- Daniel, Cecil:Gordon, Helen)
g4
snafun::extract_vertex_names(g4)

# "Arrows" can be arbitrarily long
g5 <- create_manual_graph(Alice +---------+ Bob)
g5

# Special vertex names
g6 <- create_manual_graph("+" -- "-", "*" -- "/", "\%\%" -- "\%/\%")
g6
}
