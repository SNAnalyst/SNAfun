% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract.R
\name{extract_egonet}
\alias{extract_egonet}
\title{Extract ego networks}
\usage{
extract_egonet(x, vertices = NULL, order = 1, type = c("all", "out", "in"))
}
\arguments{
\item{x}{input graph of class \code{igraph} or \code{network}}

\item{vertices}{if \code{NULL} the egonetworks for each vertex in the graph 
are returned. If \code{vertices} is a single vertex or a vector, the ego networks 
for these specific vertices are returned. This is generally what you want.}

\item{order}{the order of the resulting graph}

\item{type}{Character constant, it specifies how to use the direction of the 
edges if a directed graph is analyzed. For ‘out’ only the outgoing edges are 
followed, so all vertices reachable from the source vertex in at most 
\code{order} steps are counted. For ‘"in"’ all vertices from which the 
source vertex is reachable in at most \code{order} steps are counted. 
‘"all"’ ignores the direction of the edges. This argument is ignored for undirected graphs.}
}
\value{
a list of graphs of the same class as the input graph
}
\description{
Extract one of more ego network from an input graph
}
\details{
For each vertex in \code{vertices}, the ego network is returned. This includes 
the vertices that can be reached in \code{order} number of steps. 
The \code{type} argument determines whether edges should be followed as 
incoming, outgoing, or undirected (and are considered undirected anyway for 
an undirected graph.)

The output is a list of egonetworks, one for each ego vertex.
}
\examples{
g <- igraph::graph_from_literal(One --+ Two +-+ Three +-- Four --+ Five +-- Six +-- Seven +-+ Eight +-+ One +-+ Five)
snafun::to_matrix(g)
extract_egonet(g, vertices = 1, order = 1, type = "in")[[1]] |> snafun::to_matrix()
extract_egonet(g, vertices = 1, order = 1, type = "out")[[1]] |> snafun::to_matrix()
extract_egonet(g, vertices = 1, order = 1, type = "all")[[1]] |> snafun::to_matrix()
extract_egonet(g, vertices = 1, order = 2, type = "in")[[1]] |> snafun::to_matrix()
extract_egonet(g, vertices = 1, order = 2, type = "out")[[1]] |> snafun::to_matrix()
extract_egonet(g, vertices = 1, order = 2, type = "all")[[1]] |> snafun::to_matrix()

extract_egonet(g, vertices = c("One"), order = 2, type = "in")[[1]] |> snafun::to_matrix()
extract_egonet(g, vertices = c("One", "Three"), order = 2, type = "in")

g_n <- snafun::to_network(g)
extract_egonet(g_n, vertices = 1, order = 1, type = "in")[[1]] |> snafun::to_matrix()
extract_egonet(g_n, vertices = 1, order = 1, type = "out")[[1]] |> snafun::to_matrix()
extract_egonet(g_n, vertices = 1, order = 1, type = "all")[[1]] |> snafun::to_matrix()
extract_egonet(g_n, vertices = 1, order = 2, type = "in")[[1]] |> snafun::to_matrix()
extract_egonet(g_n, vertices = 1, order = 2, type = "out")[[1]] |> snafun::to_matrix()
extract_egonet(g_n, vertices = 1, order = 2, type = "all")[[1]] |> snafun::to_matrix()
extract_egonet(g_n, vertices = c("One"), order = 2, type = "in")[[1]] |> snafun::to_matrix()
extract_egonet(g_n, vertices = c("One", "Three"), order = 2, type = "in")
}
