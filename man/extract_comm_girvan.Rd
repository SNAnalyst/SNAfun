% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_comm_dendrogram.R
\name{extract_comm_girvan}
\alias{extract_comm_girvan}
\title{Community structure based on edge betweenness}
\usage{
extract_comm_girvan(
  x,
  weights = NA,
  directed = TRUE,
  modularity = TRUE,
  edge.betweenness = FALSE,
  bridges = FALSE,
  merges = TRUE,
  membership = TRUE
)
}
\arguments{
\item{x}{The input graph, edge directions are ignored in directed graphs.}

\item{weights}{The weights of the edges. It must be a positive numeric vector, 
\code{NULL} or \code{NA}. If it is \code{NULL} and the input graph has a 
‘weight’ edge attribute, then that attribute will be used. If \code{NULL} and 
no such attribute is present, then the edges will have equal weights. 
Set this to \code{NA} if the graph was a ‘weight’ edge attribute, but you 
don't want to use it for community detection. Larger edge weights increase 
the probability that an edge is selected by the random walker. 
In other words, larger edge weights correspond to stronger connections.}

\item{directed}{Logical constant, whether to calculate directed edge betweenness 
for directed graphs. It is ignored for undirected graphs.}

\item{modularity}{Logical scalar, whether to include the vector of the 
modularity scores in the result. If the membership argument is \code{TRUE}, 
then it will always be calculated.}

\item{edge.betweenness}{Logical constant, whether to return the edge betweenness 
of the edges at the time of their removal.}

\item{bridges}{Logical constant, whether to return a list the edge removals 
which actually splitted a component of the graph.}

\item{merges}{Logical scalar, whether to include the merge matrix in the result.}

\item{membership}{Logical scalar, whether to calculate the membership vector 
for the split corresponding to the highest modularity value.}
}
\value{
a communities object that can be handled with the functions at 
\code{\link[igraph]{membership}}.
}
\description{
Extract communities via the Girvan Newman method
}
\details{
The edge betweenness score of an edge measures the number of shortest paths 
through it. The idea of the edge betweenness-based community structure 
detection is that it is likely that edges connecting separate modules have 
high edge betweenness as all the shortest paths from one module to another 
must traverse through them. So if we gradually remove the edge with the 
highest edge betweenness score we will get a hierarchical map, a rooted tree, 
called a dendrogram of the graph. The leafs of the tree are the individual 
vertices and the root of the tree represents the whole graph.

The result of this function can be queried using the utility functions 
documented here: \code{\link[igraph]{membership}},
}
\references{
this function just wraps the \code{\link[igraph]{edge_betweenness}}
function and documentation.
}
