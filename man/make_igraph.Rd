% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_igraph.R
\name{make_igraph}
\alias{make_igraph}
\title{Make igraph object}
\usage{
make_igraph(x, bipartite = FALSE)
}
\arguments{
\item{x}{input object}

\item{bipartite}{logical, whether an adjacency matrix represents a bipartite 
network. Forces the creation of a bipartite igraph x. This argument is 
only used when a matrix is converted to an \code{igraph} object and is 
ignored otherwise.}
}
\description{
Make an igraph object from various input types.
}
\details{
The following inputs are supported:
\describe{
\item{network object}{\code{network} object created by the network package}
\item{matrix}{This is a base R type matrix. When a matrix is used as input, 
the function the number of rows is equal to the number of columns. 
If they do not, the function assumes the matrix refers to a bipartite network. 
This assumption can be overridden by the \code{bipartite} argument.}
\item{data.frame}{The \code{data.frame} contains an edge list. 
The data.frame requires the first column to contain the senders and the 
second column contains the receivers. If there are any additional 
columns, these are considered to be edge attributes.

NOTE: The created \code{igraph} object is considered to be directed. 
If an undirected network is required, run \code{\link[igraph]{as.undirected}} 
on the output from this function.}
}



When a matrix is used as input, the function the number of rows is equal  
to the number of columns. If they do not, the function assumes the matrix 
refers to a bipartite network. This assumption can be overridden by 
the \code{bipartite} argument.


#### add vertices = NULL argument!!!!!
#### add directed = F argument???
}
\note{
The functions are largely based upon the \code{\link[migraph]{as_igraph}} 
functions. The versions in this package do not require tidyverse dependencies 
and do not deal with tidygraph.
}
\examples{
# from a matrix
g <- igraph::sample_gnp(10, 2/10)
mat <- igraph::as_adjacency_matrix(g, sparse = FALSE)
make_igraph(mat)

g <- igraph::make_ring(10)
igraph::E(g)$weight <- seq_len(igraph::ecount(g))
mat <- igraph::as_adjacency_matrix(g, sparse = FALSE, attr = "weight")
make_igraph(mat)

# bipartite network, even nodes are one type, odd vertices another type
g <- igraph::make_bipartite_graph( rep(0:1,length=10), c(1:10))
mat <- igraph::as_adjacency_matrix(g, sparse = FALSE)
make_igraph(mat)  # same network, but not officially bipartite
mat <- igraph::as_incidence_matrix(g, sparse = FALSE)
make_igraph(mat, bipartite = TRUE)

relations <- data.frame(from = c("Bob", "Cecil", "Cecil", "David", 
    "David", "Esmeralda"), 
    to = c("Alice", "Bob", "Alice", "Alice", "Bob", "Alice"),
    same.dept = c(FALSE, FALSE, TRUE, FALSE, FALSE, TRUE), 
    friendship = c(4, 5, 5, 2, 1, 1), advice = c(4, 5, 5, 4, 2, 3))
make_igraph(relations)

aa <- data.frame(from = c(1,1,2,2,3,3,4,4), 
    to = c(11, 12, 13, 14, 15, 16, 17, 18))
make_igraph(aa)  # message is given if this should ne bipartite
make_igraph(aa, bipartite = TRUE)  
}
