% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/make_igraph.R
\name{make_igraph}
\alias{make_igraph}
\alias{make_igraph.matrix}
\alias{make_igraph.network}
\alias{make_igraph.igraph}
\title{Make igraph object}
\usage{
make_igraph(x, bipartite = FALSE)

\method{make_igraph}{matrix}(x, bipartite = FALSE)

\method{make_igraph}{network}(x, bipartite = FALSE)

\method{make_igraph}{igraph}(x, bipartite = FALSE)
}
\arguments{
\item{x}{input object}

\item{bipartite}{logical, whether an adjacency matrix represents a bipartite 
network. Forces the creation of a bipartite igraph x. This argument is 
only used when a matrix is converted to an \code{igraph} object and is 
ignored otherwise.}
}
\description{
Make an igraph object from various input types.
}
\details{
When a matrix is used as input, the function the number of rows is equal  
to the number of columns. If they do not, the function assumes the matrix 
refers to a bipartite network. This assumption can be overridden by 
the \code{bipartite} argument.
}
\section{Methods (by class)}{
\itemize{
\item \code{matrix}: Make an igraph object from a matrix

\item \code{network}: Make an igraph object from a network object

\item \code{igraph}: In case you feed an igraph object to this function: the object is returned unaltered
}}

\note{
The functions are largely based upon the \code{\link[migraph]{as_igraph}} 
functions. The versions in this package do not require tidyverse dependencies 
and do not deal with tidygraph.
}
\examples{
# from a matrix
g <- igraph::sample_gnp(10, 2/10)
mat <- igraph::as_adjacency_matrix(g, sparse = FALSE)
make_igraph(mat)

g <- igraph::make_ring(10)
igraph::E(g)$weight <- seq_len(igraph::ecount(g))
mat <- igraph::as_adjacency_matrix(g, sparse = FALSE, attr = "weight")
make_igraph(mat)

# bipartite network, even nodes are one type, odd vertices another type
g <- igraph::make_bipartite_graph( rep(0:1,length=10), c(1:10))
mat <- igraph::as_adjacency_matrix(g, sparse = FALSE)
make_igraph(mat)  # same network, but not officially bipartite
mat <- igraph::as_incidence_matrix(g, sparse = FALSE)
make_igraph(mat, bipartite = TRUE)
}
