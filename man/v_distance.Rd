% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/v_distance.R
\name{v_distance}
\alias{v_distance}
\title{Distances to and from a vertex}
\usage{
v_distance(
  x,
  mode = c("all", "out", "in"),
  weights = NULL,
  count_unnconnected = FALSE
)
}
\arguments{
\item{x}{input graph}

\item{mode}{character, how to follow edge direction: "all", "out", "in". 
Irrelevant for undirected graphs}

\item{weights}{if not \code{NULL}, the name of an edge attribute to use 
as edge weights}

\item{count_unnconnected}{logical, should unconnected vertices be included in 
the path lengths?}
}
\value{
data frame
}
\description{
Distances to and from a vertex
}
\details{
For each vertex, this function returns the average distance to all other 
vertices, the standard deviation of the distances, the maximum distance, 
the median distance, and the smmed distances.

The distances are determined either following the direction of the edges (
"out" or "in")--in case of a directed network, or irrespective of edge 
direction. 

Distances can be weighted against an edge attribute. 

When the graph is not connected, it is not obvious how to include the distances 
to/from unconnected vertices. If \code{count_unnconnected} is \code{TRUE}, the 
distances will count as infinite and most of the statistics will hence be 
infinite too. If \code{count_unnconnected} is \code{TRUE}, the paths to and from 
unconnected vertices are not included. Isolates will then have zero and NA 
scores, obviously.
}
\examples{
data("florentine", package = "snafun")
g <- florentine$flobusiness
v_distance(g, mode = "all", count_unnconnected = FALSE)
v_distance(g, mode = "all", count_unnconnected = TRUE)
v_distance(g, mode = "in", count_unnconnected = FALSE)
v_distance(g, mode = "out", count_unnconnected = FALSE)
v_distance(snafun::to_network(g), mode = "all", count_unnconnected = FALSE)
v_distance(snafun::to_network(g), mode = "all", count_unnconnected = TRUE)
v_distance(snafun::to_network(g), mode = "in", count_unnconnected = FALSE)
v_distance(snafun::to_network(g), mode = "out", count_unnconnected = FALSE)

data(emon, package = "network")
g_n <- emon$LakePomona
v_distance(g_n, mode = "all")
v_distance(g_n, mode = "in")
v_distance(g_n, mode = "out")
g_i <- snafun::to_igraph(g_n)
v_distance(g_i, mode = "all")
v_distance(g_i, mode = "in")
v_distance(g_i, mode = "out")
}
