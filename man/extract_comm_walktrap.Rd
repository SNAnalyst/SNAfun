% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_comm_dendrogram.R
\name{extract_comm_walktrap}
\alias{extract_comm_walktrap}
\title{Community structure via short random walks}
\usage{
extract_comm_walktrap(
  x,
  weights = NA,
  steps = 4,
  modularity = TRUE,
  merges = TRUE,
  membership = TRUE
)
}
\arguments{
\item{x}{The input graph, edge directions are ignored in directed graphs.}

\item{weights}{The weights of the edges. It must be a positive numeric vector, 
\code{NULL} or \code{NA}. If it is \code{NULL} and the input graph has a 
‘weight’ edge attribute, then that attribute will be used. If \code{NULL} and 
no such attribute is present, then the edges will have equal weights. 
Set this to \code{NA} if the graph was a ‘weight’ edge attribute, but you 
don't want to use it for community detection. Larger edge weights increase 
the probability that an edge is selected by the random walker. 
In other words, larger edge weights correspond to stronger connections.}

\item{steps}{The length of the random walks to perform.}

\item{modularity}{Logical scalar, whether to include the vector of the 
modularity scores in the result. If the membership argument is \code{TRUE}, 
then it will always be calculated.}

\item{merges}{Logical scalar, whether to include the merge matrix in the result.}

\item{membership}{Logical scalar, whether to calculate the membership vector 
for the split corresponding to the highest modularity value.}
}
\value{
a \code{communities} object
}
\description{
Extract communities using the walktrap algorithm
}
\details{
Find community structure in the graph by using random walks across the 
edges of the graph. The idea is that short random walks tend to stay in the 
same community.

The result of this function can be queried using the utility functions 
documented here: \code{\link[igraph]{membership}},
}
\references{
this function just wraps the \code{\link[igraph]{cluster_walktrap}}
function and documentation.
}
