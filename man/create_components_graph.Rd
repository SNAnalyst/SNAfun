% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create.R
\name{create_components_graph}
\alias{create_components_graph}
\title{Create a graph with strict components}
\usage{
create_components_graph(
  n_vertices,
  directed = FALSE,
  membership = NULL,
  graph = c("igraph", "network", "matrix")
)
}
\arguments{
\item{n_vertices}{a single number for a one-mode graph, a vector with two 
numbers for a two-mode graph}

\item{directed}{logical, should the connections be directed or not (default)}

\item{membership}{numeric vector, with the group membership for each vertex}

\item{graph}{output class, either "igraph" (the default), "network", or "matrix"}
}
\value{
a graph of the specified class
}
\description{
Create a graph consisting of separate components
}
\details{
Creates a graph where only vertices (and all) vertices are connected that 
are a member of the ame component.

If \code{n_vertices} has length 1, a one-mode graph is created. 
Each component has internal density 1 and there are no connections between 
the components.

If \code{n_vertices} has length 1, a two-mode graph is created. 
An edge between two vertices only occurs for between vertices that are 
both of dissimilar type and and both in thesame component. 
Regardless of the choice for \code{directed}, the ensuing graph will be 
undirected by definition.

The vertices in the final graph will be numerically named, from 1 to 
\code{n_vertices} for one-mode graphs or from 1 to \code{sum(n_vertices)} 
for two-mode graphs.
}
\note{
Much of the code comes from \code{\link[manynet]{create_components}} 
in the \pkg{manynet} package.
}
\examples{
create_components_graph(10, membership = c(1,1,1,2,2,2,3,3,3,3))
create_components_graph(10, membership = c(1,1,1,2,2,2,3,3,3,3), directed = TRUE) 

# bipartite
\dontrun{
create_components_graph(c(4, 6), membership = c(1,1,1,2,2,2,3,3,3,3))  |> 
  snafun::plot()
}
# the row vertices are numbered 1-4, the column vertices are 5-10
create_components_graph(c(4, 6), membership = c(1,1,2,3,2,2,3,3,3,1), graph = "matrix")
}
