% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extract.R
\name{extract_subgraph}
\alias{extract_subgraph}
\title{Extract a subgraph}
\usage{
extract_subgraph(x, v_to_keep, e_to_keep)
}
\arguments{
\item{x}{input graph}

\item{v_to_keep}{Numeric vector, the vertices of the original graph which 
will form the subgraph.}

\item{e_to_keep}{The edge ids of the edges that will be kept in the resulting graph.}
}
\value{
graph of same class as the input graph
}
\description{
Extract a subgraph
}
\details{
Extract a subgraph from an input graph object by *either* choosing which 
vertices to keep *or* which edges to keep.

When both \code{v_to_keep} and \code{e_to_keep} are provided, only 
\code{v_to_keep} is used. Of course, the resulting graph can subsequently 
be used as input to this function while providing \code{e_to_keep} to further 
prune the network. 

When vertices are removed (through \code{v_to_keep}), exactly the specified 
vertices and all the already existing edges between them will be kept in the 
resulting graph. Edges that lose their sender and/or receiver are removed  
from the resulting graph.

Both \code{v_to_keep} and \code{e_to_keep} are numeric vectors and do not 
take names.

The function works on both \code{igraph} and \code{network} and returns a subgraph 
of that same class.

The underlying functions that perform the actual extraction are 
\code{\link[igraph]{induced_subgraph}}, 
\code{\link[igraph]{subgraph.edges}}, and 
\code{\link[network]{get.inducedSubgraph}}.
Consult these functions for more detail and, in some cases, some more 
functionality.
}
\examples{
g <- igraph::make_ring(10)
extract_subgraph(g, v_to_keep = 3:8)
extract_subgraph(g, e_to_keep = 4:8)
extract_subgraph(g, v_to_keep = 3:8, e_to_keep = 4:8)

g <- to_network(g)
extract_subgraph(g, v_to_keep = 3:8)
extract_subgraph(g, e_to_keep = 4:8)
extract_subgraph(g, v_to_keep = 3:8, e_to_keep = 4:8)

data(emon, package = "network")
g <- emon$MtStHelens
extract_subgraph(g, e_to_keep = which(extract_edge_attribute(g, 'Frequency') == 2))

g_i <- to_igraph(g)
extract_subgraph(g_i, e_to_keep = which(extract_edge_attribute(g_i, 'weight') == 2))
}
